/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package client;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.net.Socket;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

import javazoom.jl.player.Player;

/**
 *
 * @author azazel
 */
public class MainScreen extends javax.swing.JFrame {

    private static final java.util.logging.Logger logger = java.util.logging.Logger
            .getLogger(MainScreen.class.getName());

    /**
     * Creates new form mainScreen
     */
    public MainScreen() {
        initComponents();
        setLocationRelativeTo(null);
        loadSong();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainContainer = new java.awt.Panel();
        btnStart = new javax.swing.JButton();
        btnStop = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        btnPrevious = new javax.swing.JButton();
        lblStartTimer = new javax.swing.JLabel();
        lblEndTimer = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        btnPause = new javax.swing.JButton();
        btnGoBackBySecond = new javax.swing.JButton();
        btnSkipBySecond = new javax.swing.JButton();
        btnUpload = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        listSongs = new javax.swing.JList<>();
        sliderVolume = new javax.swing.JSlider();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("RetroAudio");

        btnStart.setText("Start");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        btnStop.setText("Stop");

        btnNext.setText("Next");

        btnPrevious.setText("Previous");

        lblStartTimer.setText("00:00");

        lblEndTimer.setText("00:00");

        btnPause.setText("||");

        btnGoBackBySecond.setText("<<");

        btnSkipBySecond.setText(">>");

        btnUpload.setText("Upload");
        btnUpload.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnUploadMouseClicked(evt);
            }
        });

        jScrollPane1.setViewportView(listSongs);

        javax.swing.GroupLayout mainContainerLayout = new javax.swing.GroupLayout(mainContainer);
        mainContainer.setLayout(mainContainerLayout);
        mainContainerLayout.setHorizontalGroup(
            mainContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainContainerLayout.createSequentialGroup()
                        .addComponent(btnStart)
                        .addGap(18, 18, 18)
                        .addComponent(btnStop)
                        .addGap(18, 18, 18)
                        .addComponent(btnNext)
                        .addGap(18, 18, 18)
                        .addComponent(btnPrevious)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnUpload)
                        .addGap(22, 22, 22))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainContainerLayout.createSequentialGroup()
                        .addGap(0, 37, Short.MAX_VALUE)
                        .addGroup(mainContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainContainerLayout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(lblStartTimer)
                                .addGap(379, 379, 379)
                                .addComponent(lblEndTimer))
                            .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 496, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(41, 41, 41))
                    .addGroup(mainContainerLayout.createSequentialGroup()
                        .addGroup(mainContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(mainContainerLayout.createSequentialGroup()
                                .addComponent(btnGoBackBySecond)
                                .addGap(18, 18, 18)
                                .addComponent(btnPause)
                                .addGap(18, 18, 18)
                                .addComponent(btnSkipBySecond)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(sliderVolume, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())))
        );
        mainContainerLayout.setVerticalGroup(
            mainContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainContainerLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEndTimer)
                    .addComponent(lblStartTimer))
                .addGap(18, 18, 18)
                .addGroup(mainContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPause)
                    .addComponent(btnGoBackBySecond)
                    .addComponent(btnSkipBySecond)
                    .addComponent(sliderVolume, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
                .addGap(11, 11, 11)
                .addGroup(mainContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnStart)
                    .addComponent(btnStop)
                    .addComponent(btnNext)
                    .addComponent(btnPrevious)
                    .addComponent(btnUpload))
                .addContainerGap())
        );

        btnStart.getAccessibleContext().setAccessibleName("");
        btnStart.getAccessibleContext().setAccessibleDescription("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void playAudioMp3(byte[] audioData) throws Exception {
        ByteArrayInputStream bais = new ByteArrayInputStream(audioData);
        Player player = new Player(bais);
        player.play();
    }

    private void playAudio(byte[] audioData) throws Exception {
        try (ByteArrayInputStream bais = new ByteArrayInputStream(audioData)) {
            AudioInputStream ais = AudioSystem.getAudioInputStream(bais);

            Clip clip = AudioSystem.getClip();
            clip.open(ais);
            clip.start();
        }
    }

    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnStartActionPerformed
        // TODO add your handling code here:
        String selectedSong = listSongs.getSelectedValue();

        if (selectedSong == null) {
            return;
        }

        try (Socket socket = new Socket("localhost", 5000);
                DataInputStream in = new DataInputStream(socket.getInputStream());
                DataOutputStream out = new DataOutputStream(socket.getOutputStream())) {
            // send request for streaming
            out.writeUTF("STREAM");
            out.writeUTF(selectedSong);

            // receive file size
            long fileSize = in.readLong();

            // receive file data
            byte[] buffer = new byte[4096];
            long remmaining = fileSize;
            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
            int read;
            while (remmaining > 0 && (read = in.read(buffer, 0, (int) Math.min(buffer.length, remmaining))) > 0) {
                byteArrayOutputStream.write(buffer, 0, read);
                remmaining -= read;
            }

            // Play audio
            byte[] audioData = byteArrayOutputStream.toByteArray();
            String ext = selectedSong.substring(selectedSong.lastIndexOf('.') + 1).toLowerCase();

            if (ext.equals("mp3")) {
                playAudioMp3(audioData);
            } else {
                playAudio(audioData);
            }
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }// GEN-LAST:event_btnStartActionPerformed

    private void btnUploadMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_btnUploadMouseClicked
        javax.swing.JFileChooser fileChooser = new javax.swing.JFileChooser();
        int result = fileChooser.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();

            try (Socket socket = new Socket("localhost", 5000);
                    DataOutputStream dos = new DataOutputStream(socket.getOutputStream());
                    FileInputStream fis = new FileInputStream(selectedFile)) {
                // Send UPLOAD command to server
                dos.writeUTF("UPLOAD");
                // Send filename
                dos.writeUTF(selectedFile.getName());
                // Send filesize
                dos.writeLong(selectedFile.length());
                // Send file data
                byte[] buffer = new byte[4096];

                int read;
                while ((read = fis.read(buffer)) > 0) {
                    dos.write(buffer, 0, read);
                }
                dos.flush();

                JOptionPane.showMessageDialog(this, "Upload Successfully", "Information",
                        JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }// GEN-LAST:event_btnUploadMouseClicked

    private void loadSong() {
        try (Socket socket = new Socket("localhost", 5000);
                DataOutputStream out = new DataOutputStream(socket.getOutputStream());
                DataInputStream in = new DataInputStream(socket.getInputStream())) {
            // Send the command
            out.writeUTF("LIST");
            // Read number of songs
            int songCount = in.readInt();

            // Prepare list song model
            DefaultListModel<String> model = new DefaultListModel<>();
            for (int i = 0; i < songCount; i++) {
                String songName = in.readUTF();
                int dotIndex = songName.lastIndexOf('.');
                // String displayName = (dotIndex > 0) ? songName.substring(0, dotIndex) : songName;
                model.addElement(songName);
            }

            listSongs.setModel(model);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new MainScreen().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGoBackBySecond;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPause;
    private javax.swing.JButton btnPrevious;
    private javax.swing.JButton btnSkipBySecond;
    private javax.swing.JButton btnStart;
    private javax.swing.JButton btnStop;
    private javax.swing.JButton btnUpload;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblEndTimer;
    private javax.swing.JLabel lblStartTimer;
    private javax.swing.JList<String> listSongs;
    private java.awt.Panel mainContainer;
    private javax.swing.JSlider sliderVolume;
    // End of variables declaration//GEN-END:variables
}
