package clientside;

import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.Field;
import java.net.InetAddress;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;

import javax.sound.sampled.FloatControl;
import javax.sound.sampled.SourceDataLine;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import javax.swing.SwingUtilities;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import javazoom.jl.decoder.Bitstream;
import javazoom.jl.decoder.Decoder;
import javazoom.jl.decoder.Header;
import javazoom.jl.decoder.SampleBuffer;
import javazoom.jl.player.Player;

/**
 *
 * @author azazel
 */
public class MainScreen extends javax.swing.JFrame {

    private static final java.util.logging.Logger logger = java.util.logging.Logger
            .getLogger(MainScreen.class.getName());

    private int serverPort = 1124;

    /**
     * Creates new form MainScreen
     */
    public MainScreen() {
        initComponents();
        setLocationRelativeTo(null);
        emptyDefaultListSong();
        loadSongs();
        btnStop.addActionListener(e -> stopStreaming());
        btnNext.addActionListener(e -> nextSong());
        btnPrevious.addActionListener(e -> previousSong());

        slidAudioVolume.setMinimum(0);
        slidAudioVolume.setMaximum(100);
        slidAudioVolume.setValue(80);

        // add a single ChangeListener that applies the slider to the discovered gain
        // control
        slidAudioVolume.addChangeListener(e -> setVolumeFromSlider(slidAudioVolume.getValue()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        pbarAudioProgress = new javax.swing.JProgressBar();
        lblStartTimer = new javax.swing.JLabel();
        lblEndTimer = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listSongs = new javax.swing.JList<>();
        btnStart = new javax.swing.JButton();
        btnStop = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        btnPrevious = new javax.swing.JButton();
        btnUpload = new javax.swing.JButton();
        btnPause = new javax.swing.JButton();
        btnSkipForward = new javax.swing.JButton();
        btnSkipBackward = new javax.swing.JButton();
        lblSongName = new javax.swing.JLabel();
        slidAudioVolume = new javax.swing.JSlider();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblStartTimer.setText("00:00");

        lblEndTimer.setText("00:00");

        listSongs.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };

            public int getSize() {
                return strings.length;
            }

            public String getElementAt(int i) {
                return strings[i];
            }
        });
        jScrollPane1.setViewportView(listSongs);

        btnStart.setText("Start");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        btnStop.setText("Stop");

        btnNext.setText("Next");

        btnPrevious.setText("Previous");

        btnUpload.setText("Upload");
        btnUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadActionPerformed(evt);
            }
        });

        btnPause.setText("||");

        btnSkipForward.setText(">>");

        btnSkipBackward.setText("<<");

        lblSongName.setText("");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(55, 55, 55)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING,
                                                                false)
                                                        .addComponent(jScrollPane1)
                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                                .addComponent(lblStartTimer)
                                                                .addGap(108, 108, 108)
                                                                .addComponent(btnSkipBackward)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(btnPause)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(btnSkipForward)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(slidAudioVolume,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(
                                                                        javax.swing.LayoutStyle.ComponentPlacement.RELATED,
                                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                        Short.MAX_VALUE)
                                                                .addComponent(lblEndTimer))
                                                        .addComponent(pbarAudioProgress,
                                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addContainerGap(55, Short.MAX_VALUE))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(btnStart)
                                                .addGap(18, 18, 18)
                                                .addComponent(btnStop)
                                                .addGap(18, 18, 18)
                                                .addComponent(btnNext)
                                                .addGap(18, 18, 18)
                                                .addComponent(btnPrevious)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(btnUpload))))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(317, 317, 317)
                                .addComponent(lblSongName)
                                .addGap(0, 0, Short.MAX_VALUE)));
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(lblSongName)
                                .addGap(9, 9, 9)
                                .addComponent(pbarAudioProgress, javax.swing.GroupLayout.PREFERRED_SIZE, 27,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(lblStartTimer)
                                                        .addComponent(lblEndTimer))
                                                .addGap(28, 28, 28))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout
                                                .createSequentialGroup()
                                                .addGroup(jPanel1Layout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(btnPause)
                                                        .addComponent(btnSkipForward)
                                                        .addComponent(btnSkipBackward)
                                                        .addComponent(slidAudioVolume,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 218,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(18, 18, 18)
                                                .addGroup(jPanel1Layout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(btnStart)
                                                        .addComponent(btnStop)
                                                        .addComponent(btnNext)
                                                        .addComponent(btnPrevious))
                                                .addContainerGap(27, Short.MAX_VALUE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout
                                                .createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(btnUpload)
                                                .addContainerGap()))));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap()));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private Socket streamingSocket;
    private Thread playerThread;
    private Player mp3Player;

    // field: current gain control if we find it via reflection
    private volatile FloatControl currentGainControl = null;

    /**
     * Previous song for btnPrevious
     */
    private void previousSong() {
        ListModel<String> model = listSongs.getModel();

        int size = model.getSize();
        if (size == 0) {
            JOptionPane.showMessageDialog(this, "There are no songs available");
            return;
        }

        int current = listSongs.getSelectedIndex();
        int previousIndex;

        if (current <= 0) {
            previousIndex = size - 1;
        } else {
            previousIndex = current - 1;
        }

        // set selected song and make it visible
        listSongs.setSelectedIndex(previousIndex);
        listSongs.ensureIndexIsVisible(previousIndex);

        String previousSong = model.getElementAt(previousIndex);
        streamingAndPlay(previousSong);
    }

    /**
     * Next song function for btnNext
     */
    private void nextSong() {
        ListModel<String> model = listSongs.getModel();

        int size = model.getSize();
        if (size == 0) {
            JOptionPane.showMessageDialog(this, "No songs available");
            return;
        }

        int current = listSongs.getSelectedIndex();
        int nextIndex;

        // if at the end of list song and click next button will
        if (current < 0 || current >= size - 1) {
            nextIndex = 0;
        } else {
            nextIndex = current + 1;
        }

        // set selected and visible
        listSongs.setSelectedIndex(nextIndex);
        listSongs.ensureIndexIsVisible(nextIndex);

        String nextSong = model.getElementAt(nextIndex);

        streamingAndPlay(nextSong);
    }

    /**
     * This function use for streaming after play button click
     */
    private void streamingAndPlay(String fileName) {
        stopStreaming();

        playerThread = new Thread(() -> {
            try {
                streamingSocket = new Socket(InetAddress.getByName("localhost"), serverPort);

                DataOutputStream dos = new DataOutputStream(streamingSocket.getOutputStream());
                DataInputStream dis = new DataInputStream(streamingSocket.getInputStream());

                dos.writeUTF("STREAMING");
                dos.writeUTF(fileName);
                dos.flush();

                long fileSize = dis.readLong();

                // If file size smaller than 0 then it's mean no file found
                if (fileSize < 0) {
                    lblSongName.setText("Not found " + fileName);
                    SwingUtilities
                            .invokeLater(() -> JOptionPane.showInputDialog(this, "File not found on this server"));
                    closeQuietly(dis, dos, streamingSocket);
                    return;
                }

                SwingUtilities.invokeLater(() -> lblSongName.setText("Playing: " + fileName));

                // Use BufferedInputStreaming wrapping the socket input stream for JLayer
                BufferedInputStream bis = new BufferedInputStream(streamingSocket.getInputStream());
                // after creating mp3Player
                mp3Player = new Player(bis);

                // Start a short background task to try to discover the player's
                // SourceDataLine/FloatControl.
                // Player may create its audio device/line lazily, so we try a few times with
                // small sleeps.
                new Thread(() -> {
                    FloatControl found = null;
                    for (int attempt = 0; attempt < 20; attempt++) { // ~2 seconds total (20 * 100ms)
                        try {
                            // reflection: Player has a private 'audio' field which holds the AudioDevice
                            Field audioField = Player.class.getDeclaredField("audio");
                            audioField.setAccessible(true);
                            Object audioDev = audioField.get(mp3Player);
                            if (audioDev != null) {
                                // try to find a SourceDataLine field
                                for (Field f : audioDev.getClass().getDeclaredFields()) {
                                    if (SourceDataLine.class.isAssignableFrom(f.getType())) {
                                        f.setAccessible(true);
                                        Object maybeLine = f.get(audioDev);
                                        if (maybeLine instanceof SourceDataLine) {
                                            SourceDataLine line = (SourceDataLine) maybeLine;
                                            if (line != null
                                                    && line.isControlSupported(FloatControl.Type.MASTER_GAIN)) {
                                                found = (FloatControl) line.getControl(FloatControl.Type.MASTER_GAIN);
                                                break;
                                            }
                                        }
                                    }
                                }
                                // fallback by field-name (some JLayer builds use 'line' or 'source')
                                if (found == null) {
                                    try {
                                        Field f = audioDev.getClass().getDeclaredField("line");
                                        f.setAccessible(true);
                                        Object maybeLine = f.get(audioDev);
                                        if (maybeLine instanceof SourceDataLine) {
                                            SourceDataLine line = (SourceDataLine) maybeLine;
                                            if (line.isControlSupported(FloatControl.Type.MASTER_GAIN)) {
                                                found = (FloatControl) line.getControl(FloatControl.Type.MASTER_GAIN);
                                            }
                                        }
                                    } catch (NoSuchFieldException ignored) {
                                    }
                                    try {
                                        Field f = audioDev.getClass().getDeclaredField("source");
                                        f.setAccessible(true);
                                        Object maybeLine = f.get(audioDev);
                                        if (maybeLine instanceof SourceDataLine) {
                                            SourceDataLine line = (SourceDataLine) maybeLine;
                                            if (line.isControlSupported(FloatControl.Type.MASTER_GAIN)) {
                                                found = (FloatControl) line.getControl(FloatControl.Type.MASTER_GAIN);
                                            }
                                        }
                                    } catch (NoSuchFieldException ignored) {
                                    }
                                }
                            }
                        } catch (Throwable ignored) {
                            // ignore reflection exceptions and retry
                        }

                        if (found != null) {
                            // set the shared field and apply current slider value on EDT
                            currentGainControl = found;
                            SwingUtilities.invokeLater(() -> setVolumeFromSlider(slidAudioVolume.getValue()));
                            break;
                        }

                        try {
                            Thread.sleep(100);
                        } catch (InterruptedException ie) {
                            break;
                        }

                        // stop searching early if player thread dies
                        if (playerThread == null || !playerThread.isAlive())
                            break;
                    }
                }, "GainFinder-Thread").start();

                // now play (this blocks until finish)
                mp3Player.play();
                closeQuietly(dis, dos, streamingSocket);
            } catch (Exception e) {
                // TODO: handle exception
                e.printStackTrace();
                SwingUtilities
                        .invokeLater(() -> JOptionPane.showMessageDialog(this, "Playback error: " + e.getMessage()));
                closeQuietly(null, null, streamingSocket);
            }
        }, "MP3-Player-Thread");
        playerThread.start();
    }

    private void closeQuietly(DataInputStream dis, DataOutputStream dos, Socket streamingSocket) {
        try {
            if (dis != null)
                dis.close();
        } catch (Exception e) {
            // TODO: handle exception
        }
        try {
            if (dos != null)
                dis.close();
        } catch (Exception e) {
            // TODO: handle exception
        }
        try {
            if (streamingSocket != null)
                streamingSocket.close();
        } catch (Exception e) {
            // TODO: handle exception
        }
    }

    private void stopStreaming() {
        try {
            if (mp3Player != null) {
                mp3Player.close(); // will cause play() to stop
                mp3Player = null;
            }
        } catch (Exception e) {
            // TODO: handle exception
        }

        try {
            if (streamingSocket != null && !streamingSocket.isClosed()) {
                streamingSocket.close();
                streamingSocket = null;
            }
        } catch (Exception e) {
            // TODO: handle exception
        }

        if (playerThread != null && playerThread.isAlive()) {
            playerThread.interrupt();
            playerThread = null;
        }
    }

    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnStartActionPerformed
        // TODO add your handling code here:
        String selected = listSongs.getSelectedValue();

        if (selected == null) {
            JOptionPane.showMessageDialog(this, "Please select a song to play");
            return;
        }

        streamingAndPlay(selected);
    }// GEN-LAST:event_btnStartActionPerformed

    private DefaultListModel<String> songListModel;

    /**
     * This will request LIST comman to the server and return it to the client
     */
    private void loadSongs() {

        List<String> songs = new ArrayList<>();
        try (Socket getSongSocket = new Socket(InetAddress.getByName("localhost"), serverPort);
                DataInputStream dis = new DataInputStream(getSongSocket.getInputStream());
                DataOutputStream dos = new DataOutputStream(getSongSocket.getOutputStream());) {
            // empty the list to load a new list with a new song uploaded (right now just
            // make it simple)
            emptyDefaultListSong();

            dos.writeUTF("LIST"); // Command to request get list songs

            int count = dis.readInt();

            for (int i = 0; i < count; i++) {
                songs.add(dis.readUTF());
            }

            for (String song : songs) {
                songListModel.addElement(song);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * I created this function to empty the default JList values because netbean
     * keep remove my code
     */
    private void emptyDefaultListSong() {
        songListModel = new DefaultListModel<>();
        listSongs.setModel(songListModel);
    }

    /**
     * Upload file
     */
    private void btnUploadActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnUploadActionPerformed
        // TODO add your handling code here:
        try {
            JFileChooser fileChooser = new JFileChooser();

            int result = fileChooser.showOpenDialog(this);

            if (result == JFileChooser.APPROVE_OPTION) {
                File selectedFile = fileChooser.getSelectedFile();
                System.out.println("Selected File: " + selectedFile.getAbsolutePath() + " with size: "
                        + selectedFile.length());

                // // Create socket to send file after select file to upload
                try (Socket sendFile = new Socket(InetAddress.getByName("localhost"), serverPort);
                        DataInputStream dis = new DataInputStream(sendFile.getInputStream());
                        DataOutputStream dos = new DataOutputStream(sendFile.getOutputStream());
                        FileInputStream fis = new FileInputStream(selectedFile)) {
                    // Send command
                    dos.writeUTF("UPLOAD");

                    // Send file
                    dos.writeUTF(selectedFile.getName());

                    // Send file sizze
                    dos.writeLong(selectedFile.length());

                    // Send file data
                    byte[] buffer = new byte[4096];
                    int read;

                    while ((read = fis.read(buffer)) > 0) {
                        dos.write(buffer, 0, read);
                    }

                    String response = dis.readUTF();

                    if ("TRUE".equals(response)) {
                        JOptionPane.showMessageDialog(this, "Upload Successfully");
                        loadSongs();
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        } catch (Exception e) {
            // TODO: handle exception
            e.printStackTrace();
        }

    }// GEN-LAST:event_btnUploadActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager
                    .getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new MainScreen().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPause;
    private javax.swing.JButton btnPrevious;
    private javax.swing.JButton btnSkipBackward;
    private javax.swing.JButton btnSkipForward;
    private javax.swing.JButton btnStart;
    private javax.swing.JButton btnStop;
    private javax.swing.JButton btnUpload;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblEndTimer;
    private javax.swing.JLabel lblSongName;
    private javax.swing.JLabel lblStartTimer;
    private javax.swing.JList<String> listSongs;
    private javax.swing.JProgressBar pbarAudioProgress;
    private javax.swing.JSlider slidAudioVolume;
    // End of variables declaration//GEN-END:variables

    private void setVolumeFromSlider(int sliderValue) {
        FloatControl gain = currentGainControl; // local snapshot
        if (gain != null) {
            float min = gain.getMinimum();
            float max = gain.getMaximum();
            float gainDb = (max - min) * (sliderValue / 100f) + min;
            try {
                gain.setValue(gainDb);
            } catch (IllegalArgumentException ignored) {
            }
        }
        // if currentGainControl is null, nothing to do yet; when discovered we apply
        // slider value
    }
}
